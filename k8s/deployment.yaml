apiVersion: apps/v1
kind: Deployment
metadata:
  name: soundhash-api
  namespace: soundhash-production
  labels:
    app: soundhash
    component: api
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Zero-downtime deployments
  selector:
    matchLabels:
      app: soundhash
      component: api
  template:
    metadata:
      labels:
        app: soundhash
        component: api
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      # Use node affinity for better distribution across AZs
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - soundhash
              topologyKey: kubernetes.io/hostname
      
      containers:
      - name: api
        image: ghcr.io/subculture-collective/soundhash:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        
        # Environment variables from ConfigMap
        envFrom:
        - configMapRef:
            name: soundhash-config
        
        # Sensitive environment variables from Secrets
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: soundhash-secrets
              key: database-url
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: soundhash-secrets
              key: database-user
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: soundhash-secrets
              key: database-password
        - name: API_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: soundhash-secrets
              key: api-secret-key
        - name: YOUTUBE_API_KEY
          valueFrom:
            secretKeyRef:
              name: soundhash-secrets
              key: youtube-api-key
              optional: true
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: soundhash-secrets
              key: redis-password
              optional: true
        
        # Resource limits and requests
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        
        # Liveness probe - restart if unhealthy
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        # Readiness probe - don't send traffic if not ready
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Startup probe - for slow-starting containers
        startupProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 12  # 60 seconds total
        
        # Volume mounts
        volumeMounts:
        - name: temp-storage
          mountPath: /app/temp
        - name: cache-storage
          mountPath: /app/cache
        - name: logs-storage
          mountPath: /app/logs
        
        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Need writable for temp files
          capabilities:
            drop:
            - ALL
      
      # Volumes
      volumes:
      - name: temp-storage
        persistentVolumeClaim:
          claimName: soundhash-temp-pvc
      - name: cache-storage
        persistentVolumeClaim:
          claimName: soundhash-cache-pvc
      - name: logs-storage
        persistentVolumeClaim:
          claimName: soundhash-logs-pvc
      
      # Service account
      serviceAccountName: soundhash-api
      
      # Security context for the pod
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      
      # DNS configuration
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      
      # Termination grace period
      terminationGracePeriodSeconds: 30
