# Monitoring Stack for SoundHash
# Includes: Prometheus, Grafana, Jaeger, Loki, Promtail
#
# Usage:
#   Standalone:  docker compose -f docker-compose.monitoring.yml up -d
#   With app:    docker compose -f docker-compose.yml -f docker-compose.monitoring.yml up -d
#
# Note: The 'postgres-exporter' service uses the 'with-app' profile and requires the main
# docker-compose.yml to be included. When running standalone, postgres-exporter is skipped.

services:
  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: soundhash-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    networks:
      - soundhash-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Metrics visualization and dashboards
  grafana:
    image: grafana/grafana:11.3.1
    container_name: soundhash-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3001:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    networks:
      - soundhash-network
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.61
    container_name: soundhash-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
    ports:
      - "5775:5775/udp"    # Accept zipkin.thrift over compact thrift protocol
      - "6831:6831/udp"    # Accept jaeger.thrift over compact thrift protocol
      - "6832:6832/udp"    # Accept jaeger.thrift over binary thrift protocol
      - "5778:5778"        # Serve configs
      - "16686:16686"      # Serve frontend
      - "14268:14268"      # Accept jaeger.thrift directly from clients
      - "14250:14250"      # Accept model.proto
      - "9411:9411"        # Zipkin compatible endpoint
      - "4317:4317"        # OTLP gRPC receiver
      - "4318:4318"        # OTLP HTTP receiver
    networks:
      - soundhash-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Loki - Log aggregation
  loki:
    image: grafana/loki:3.2.0
    container_name: soundhash-loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - soundhash-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Promtail - Log shipper for Loki
  promtail:
    image: grafana/promtail:3.2.0
    container_name: soundhash-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/soundhash:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - soundhash-network
    depends_on:
      - loki
    restart: unless-stopped

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:v1.8.2
    container_name: soundhash-node-exporter
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - soundhash-network
    restart: unless-stopped

  # Postgres Exporter - Database metrics
  # Note: This service connects to the 'db' service from docker-compose.yml
  # It will only work when both compose files are used together
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: soundhash-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${DATABASE_USER:-soundhash_user}:${DATABASE_PASSWORD:-soundhash_password123}@db:5432/${DATABASE_NAME:-soundhash}?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - soundhash-network
    restart: unless-stopped
    profiles:
      - with-app

  # AlertManager - Alert routing and grouping (optional)
  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: soundhash-alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/config.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - soundhash-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  prometheus_data:
    name: soundhash-prometheus-data
  grafana_data:
    name: soundhash-grafana-data
  loki_data:
    name: soundhash-loki-data
  alertmanager_data:
    name: soundhash-alertmanager-data

networks:
  soundhash-network:
    external: true
